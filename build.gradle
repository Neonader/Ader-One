plugins {
  id 'eclipse'
  id 'maven-publish'
  id 'net.minecraftforge.gradle' version '5.1.+'
}

version = '1.1.0-1.19.3'
group = 'er.neonad.ader_one'
archivesBaseName = 'ader_one'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"

minecraft {
/*
 * The mappings can be changed at any time and must be in the following format.
 * Channel:   Version:
 * official   MCVersion             Official field/method names from Mojang mapping files
 * parchment  YYYY.MM.DD-MCVersion  Open community-sourced parameter names and javadocs layered on top of official
 *
 * You must be aware of the Mojang license when using the 'official' or 'parchment' mappings.
 * See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
 *
 * Parchment is an unofficial project maintained by ParchmentMC, separate from MinecraftForge
 * Additional setup is needed to use their mappings: https://parchmentmc.org/docs/getting-started
 *
 * Use non-default mappings at your own risk. They may not always work.
 * Simply re-run your setup task after changing the mappings to update your workspace.
 */
  mappings channel: 'official', version: '1.19.3'

//  accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg') // Currently, this location cannot be changed from the default.

// Default run configurations.
  runs {
    client {
      workingDirectory project.file('run')

//    "REGISTRIES": For firing of registry events.
      property 'forge.logging.markers', 'REGISTRIES'

//    Recommended logging level: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
      property 'forge.logging.console.level', 'debug'

//    Comma-separated list of namespaces to load gametests from
      property 'forge.enabledGameTestNamespaces', 'ader_one'

      mods {
        ader_one {
          source sourceSets.main
        }
      }
    }

    server {
      workingDirectory project.file('run')

      property 'forge.logging.markers', 'REGISTRIES'

      property 'forge.logging.console.level', 'debug'

      property 'forge.enabledGameTestNamespaces', 'ader_one'

      mods {
        ader_one {
          source sourceSets.main
        }
      }
    }

//  This run config launches GameTestServer and runs all registered gametests, then exits.
//  By default, the server will crash when no gametests are provided.
//  The gametest system is also enabled by default for other run configs under the /test command.
    gameTestServer {
      workingDirectory project.file('run')

      property 'forge.logging.markers', 'REGISTRIES'

      property 'forge.logging.console.level', 'debug'

      property 'forge.enabledGameTestNamespaces', 'ader_one'

      mods {
        ader_one {
          source sourceSets.main
        }
      }
    }

    data {
      workingDirectory project.file('run')

      property 'forge.logging.markers', 'REGISTRIES'

      property 'forge.logging.console.level', 'debug'

//    Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
      args '--mod', 'ader_one', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

      mods {
        ader_one {
          source sourceSets.main
        }
      }
    }
  }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
  // Put repositories for dependencies here
  // ForgeGradle automatically adds the Forge maven and Maven Central for you
}

dependencies {
// Specify the version of Minecraft to use
  minecraft 'net.minecraftforge:forge:1.19.3-44.0.40'

// Adds registrate as a dependency
//  implementation fg.deobf("com.tterrag.registrate:Registrate:MC${mc_version}-${registrate_version}")

// Use mod jar from ./libs
//  implementation fg.deobf("blank:coolmod-${mc_version}:${coolmod_version}")

// More info:
// http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
// http://www.gradle.org/docs/current/userguide/dependency_management.html
}

// Example for how to get properties into the manifest for reading at runtime.
jar {
  manifest {
    attributes([
      "Specification-Title"     : "ader_one",
      "Specification-Vendor"    : "ader_onesareus",
      "Specification-Version"   : "1",
      "Implementation-Title"    : project.name,
      "Implementation-Version"  : project.jar.archiveVersion,
      "Implementation-Vendor"   : "ader_onesareus",
      "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
    ])
  }
}

// Publish using the maven-publish plugin to reobfuscate your jar file
jar.finalizedBy('reobfJar')

// Delay the obfuscation until publishing by doing
//  publish.dependsOn('reobfJar')

publishing {
  publications {
    mavenJava(MavenPublication) {
      artifact jar
    }
  }
  repositories {
    maven {
      url "file://${project.projectDir}/mcmodsrepo"
    }
  }
}

tasks.withType(JavaCompile).configureEach {
  options.encoding = 'UTF-8'
}
